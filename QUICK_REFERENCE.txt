╔══════════════════════════════════════════════════════════════════════╗
║                    MEETING DEMO - QUICK REFERENCE                    ║
╚══════════════════════════════════════════════════════════════════════╝

┌──────────────────────────────────────────────────────────────────────┐
│ BEFORE THE MEETING                                                   │
└──────────────────────────────────────────────────────────────────────┘

Terminal Setup:
  $ conda activate autosearch
  $ cd l:\Desktop\Main\Projects\automated_systematic_literature_search

Test Run (optional but recommended):
  $ python demo_search.py
  [Do a quick run-through to familiarize yourself]

Open These Files:
  1. demo_search.py (in VS Code)
  2. _build/html/index.html (in Browser)
  3. This reference card

┌──────────────────────────────────────────────────────────────────────┐
│ DEMO SCRIPT: 10-MINUTE VERSION                                       │
└──────────────────────────────────────────────────────────────────────┘

[0:00-1:00] THE PROBLEM
  "Manual literature reviews take weeks..."
  "Hard to reproduce..."
  "Easy to miss relevant papers..."

[1:00-2:00] THE SOLUTION  
  "Findpapers Python API enables complete automation"
  "Reproducible, shareable, integrable workflows"

[2:00-5:00] SHOW THE CODE
  Open: demo_search.py
  
  Point out:
  • Line 40: Clear research query
  • Line 53: Configurable limits
  • Line 56: Multiple databases
  • Line 120: Simple 4-step workflow
  • Line 70-110: Categories for organization

[5:00-10:00] LIVE DEMONSTRATION
  $ python demo_search.py
  
  As it runs:
  • Search: "See? It searches multiple databases simultaneously"
  • Refine: Select 2 papers, reject 1, show categories
  • Download: "Automatically attempts PDF download"
  • BibTeX: "Ready to import into reference manager"

[10:00+] WRAP UP & Q&A
  "Full tutorial in the book: [show browser]"
  "Part 10: Programmatic Usage"
  "Complete reproducible workflows"

┌──────────────────────────────────────────────────────────────────────┐
│ KEY COMMANDS                                                         │
└──────────────────────────────────────────────────────────────────────┘

Run Demo:
  $ python demo_search.py

During Refinement:
  s = Select paper (relevant)
  r = Remove paper (not relevant)  
  n = Next paper
  p = Previous paper
  q = Quit and save

Quick CLI Demo (alternative):
  $ findpapers search demo.json --query "[AI] AND [mental health]" --limit-db 5
  $ findpapers refine demo.json --abstract
  $ findpapers download demo.json ./papers/ --selected
  $ findpapers bibtex demo.json refs.bib --selected

┌──────────────────────────────────────────────────────────────────────┐
│ TALKING POINTS                                                       │
└──────────────────────────────────────────────────────────────────────┘

Why Programmatic?
  ✓ "Complete reproducibility - share the exact code"
  ✓ "Automation - run weekly to monitor new papers"  
  ✓ "Integration - combine with analysis in pandas/matplotlib"
  ✓ "Collaboration - version control with git"

The Demo Shows:
  ✓ "Multi-database search in one command"
  ✓ "Interactive refinement with categories"
  ✓ "Automatic PDF download attempts"
  ✓ "Publication-ready BibTeX output"

Real-World Applications:
  ✓ "PhD students: Literature review automation"
  ✓ "Researchers: Systematic review workflows"
  ✓ "Teams: Shared reproducible methods"
  ✓ "Monitoring: Stay updated on new publications"

┌──────────────────────────────────────────────────────────────────────┐
│ DEMO CONFIGURATION (demo_search.py)                                  │
└──────────────────────────────────────────────────────────────────────┘

Topic: AI in Mental Health Diagnosis
Query: ([AI] OR [ML] OR [DL]) AND ([anxiety] OR [depression]) 
       AND [diagnosis] AND NOT [review]
Databases: PubMed, arXiv (no API keys needed!)
Date Range: 2021-2024 (recent papers)
Papers: ~5 per database (~10 total after dedup)
Duration: ~5-10 minutes
Output: mental_health_ai_demo/ directory

┌──────────────────────────────────────────────────────────────────────┐
│ EXPECTED OUTPUT                                                      │
└──────────────────────────────────────────────────────────────────────┘

mental_health_ai_demo/
├── search_results.json       ← All data (papers, decisions, categories)
├── references.bib            ← BibTeX bibliography
└── papers/                   ← Downloaded PDFs
    ├── paper1.pdf
    ├── paper2.pdf
    ├── ...
    └── download.log          ← Download status

┌──────────────────────────────────────────────────────────────────────┐
│ TROUBLESHOOTING                                                      │
└──────────────────────────────────────────────────────────────────────┘

"findpapers not found"
  → conda activate autosearch
  → pip install findpapers

"No papers found"  
  → Query might be too specific
  → Check database connectivity
  → Try simpler query first

"Download failed (403)"
  → Expected! Many papers behind paywall
  → Check download.log for details
  → Mention institutional proxy option

"Refinement not interactive"
  → Terminal compatibility issue
  → Can run with --list flag instead
  → Or skip refinement step

┌──────────────────────────────────────────────────────────────────────┐
│ BACKUP PLAN (If Demo Fails)                                         │
└──────────────────────────────────────────────────────────────────────┘

Plan A: Show pre-run results
  → Navigate to existing mental_health_ai_demo/ folder
  → Show the JSON, BibTeX, and PDFs
  → Walk through the code instead

Plan B: Command-line demo
  → Use CLI commands (faster, more reliable)
  → findpapers search/refine/download/bibtex

Plan C: Show the tutorial
  → Open browser to book
  → Navigate to Part 10
  → Walk through examples in book

┌──────────────────────────────────────────────────────────────────────┐
│ QUESTIONS TO ANTICIPATE                                              │
└──────────────────────────────────────────────────────────────────────┘

Q: "Do I need API keys?"
A: "Not for PubMed/arXiv. Scopus/IEEE require free registration."

Q: "How many papers can I search?"
A: "No hard limit, but be reasonable. 100s-1000s is fine."

Q: "Can I customize the categories?"
A: "Yes! Completely configurable - see line 70 in demo script."

Q: "Does it work on Mac/Linux?"
A: "Yes! Cross-platform. Written in pure Python."

Q: "Can I integrate with my analysis?"
A: "Absolutely! Results in JSON. Easy to load with pandas."

Q: "How long does a real search take?"
A: "Depends on databases and limits. Few minutes to an hour."

Q: "What about duplicate detection?"
A: "Automatic! Uses DOI, title, and author matching."

┌──────────────────────────────────────────────────────────────────────┐
│ RESOURCES TO SHARE                                                   │
└──────────────────────────────────────────────────────────────────────┘

📖 Tutorial Book:
   https://leonardozaggia.github.io/automated_systematic_literature_search/

💻 Demo Script:
   demo_search.py (in project root)

📚 Findpapers Repository:
   https://github.com/jonatasgrosman/findpapers

📄 Tutorial Section:
   findpapers/1_demo_findpapers.md → Part 10

┌──────────────────────────────────────────────────────────────────────┐
│ POST-MEETING FOLLOW-UP                                               │
└──────────────────────────────────────────────────────────────────────┘

Email to attendees:
  □ Link to online book
  □ Copy of demo_search.py
  □ Link to DEMO_README.md
  □ Your contact info for questions

Next steps for interested users:
  1. Install: pip install findpapers
  2. Try demo: python demo_search.py
  3. Read tutorial: Part 10 in book
  4. Adapt for their research
  5. Join community/contribute

╔══════════════════════════════════════════════════════════════════════╗
║                           YOU'RE READY! 🚀                           ║
╚══════════════════════════════════════════════════════════════════════╝

Remember:
  ✓ Stay calm and go slowly
  ✓ It's okay if something fails - have backups
  ✓ Focus on the value, not perfection
  ✓ Engage with questions
  ✓ Point to full tutorial for details

Good luck! You've got this! 💪📚🔬
